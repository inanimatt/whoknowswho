<?php

/**
 * BaseStory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $story_type_id
 * @property integer $is_public
 * @property integer $created_by
 * @property string $title
 * @property string $subtitle
 * @property string $version_comment
 * @property string $description
 * @property string $photo_url
 * @property string $photo_caption
 * @property string $photo_licence
 * @property string $teaser
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property integer $views
 * @property integer $interest
 * @property StoryType $StoryType
 * @property sfGuardUser $Creator
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $Facts
 * @property Doctrine_Collection $StoryFacts
 * @property Doctrine_Collection $RelatedStories
 * @property StoryRating $Rating
 * @property Doctrine_Collection $Home
 * @property Doctrine_Collection $Story
 * @property Doctrine_Collection $StoryRelation
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getStoryTypeId()     Returns the current record's "story_type_id" value
 * @method integer             getIsPublic()        Returns the current record's "is_public" value
 * @method integer             getCreatedBy()       Returns the current record's "created_by" value
 * @method string              getTitle()           Returns the current record's "title" value
 * @method string              getSubtitle()        Returns the current record's "subtitle" value
 * @method string              getVersionComment()  Returns the current record's "version_comment" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method string              getPhotoUrl()        Returns the current record's "photo_url" value
 * @method string              getPhotoCaption()    Returns the current record's "photo_caption" value
 * @method string              getPhotoLicence()    Returns the current record's "photo_licence" value
 * @method string              getTeaser()          Returns the current record's "teaser" value
 * @method timestamp           getCreatedAt()       Returns the current record's "created_at" value
 * @method timestamp           getUpdatedAt()       Returns the current record's "updated_at" value
 * @method integer             getViews()           Returns the current record's "views" value
 * @method integer             getInterest()        Returns the current record's "interest" value
 * @method StoryType           getStoryType()       Returns the current record's "StoryType" value
 * @method sfGuardUser         getCreator()         Returns the current record's "Creator" value
 * @method Doctrine_Collection getComments()        Returns the current record's "Comments" collection
 * @method Doctrine_Collection getFacts()           Returns the current record's "Facts" collection
 * @method Doctrine_Collection getStoryFacts()      Returns the current record's "StoryFacts" collection
 * @method Doctrine_Collection getRelatedStories()  Returns the current record's "RelatedStories" collection
 * @method StoryRating         getRating()          Returns the current record's "Rating" value
 * @method Doctrine_Collection getHome()            Returns the current record's "Home" collection
 * @method Doctrine_Collection getStory()           Returns the current record's "Story" collection
 * @method Doctrine_Collection getStoryRelation()   Returns the current record's "StoryRelation" collection
 * @method Story               setId()              Sets the current record's "id" value
 * @method Story               setStoryTypeId()     Sets the current record's "story_type_id" value
 * @method Story               setIsPublic()        Sets the current record's "is_public" value
 * @method Story               setCreatedBy()       Sets the current record's "created_by" value
 * @method Story               setTitle()           Sets the current record's "title" value
 * @method Story               setSubtitle()        Sets the current record's "subtitle" value
 * @method Story               setVersionComment()  Sets the current record's "version_comment" value
 * @method Story               setDescription()     Sets the current record's "description" value
 * @method Story               setPhotoUrl()        Sets the current record's "photo_url" value
 * @method Story               setPhotoCaption()    Sets the current record's "photo_caption" value
 * @method Story               setPhotoLicence()    Sets the current record's "photo_licence" value
 * @method Story               setTeaser()          Sets the current record's "teaser" value
 * @method Story               setCreatedAt()       Sets the current record's "created_at" value
 * @method Story               setUpdatedAt()       Sets the current record's "updated_at" value
 * @method Story               setViews()           Sets the current record's "views" value
 * @method Story               setInterest()        Sets the current record's "interest" value
 * @method Story               setStoryType()       Sets the current record's "StoryType" value
 * @method Story               setCreator()         Sets the current record's "Creator" value
 * @method Story               setComments()        Sets the current record's "Comments" collection
 * @method Story               setFacts()           Sets the current record's "Facts" collection
 * @method Story               setStoryFacts()      Sets the current record's "StoryFacts" collection
 * @method Story               setRelatedStories()  Sets the current record's "RelatedStories" collection
 * @method Story               setRating()          Sets the current record's "Rating" value
 * @method Story               setHome()            Sets the current record's "Home" collection
 * @method Story               setStory()           Sets the current record's "Story" collection
 * @method Story               setStoryRelation()   Sets the current record's "StoryRelation" collection
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6716 2009-11-12 19:26:28Z jwage $
 */
abstract class BaseStory extends FoafRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('story');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => '8',
             ));
        $this->hasColumn('story_type_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('is_public', 'integer', 1, array(
             'type' => 'integer',
             'default' => '0',
             'notnull' => true,
             'length' => '1',
             ));
        $this->hasColumn('created_by', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => '4',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('subtitle', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('version_comment', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('description', 'string', 2147483647, array(
             'type' => 'string',
             'length' => '2147483647',
             ));
        $this->hasColumn('photo_url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('photo_caption', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('photo_licence', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('teaser', 'string', 512, array(
             'type' => 'string',
             'length' => '512',
             ));
        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('views', 'integer', 8, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => '8',
             ));
        $this->hasColumn('interest', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 0,
             'length' => '2',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('StoryType', array(
             'local' => 'story_type_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasOne('sfGuardUser as Creator', array(
             'local' => 'created_by',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasMany('StoryComment as Comments', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('Fact as Facts', array(
             'refClass' => 'StoryFact',
             'local' => 'story_id',
             'foreign' => 'fact_id'));

        $this->hasMany('StoryFact as StoryFacts', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('Story as RelatedStories', array(
             'refClass' => 'StoryRelation',
             'local' => 'story_id',
             'foreign' => 'related_story_id'));

        $this->hasOne('StoryRating as Rating', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $this->hasMany('Home', array(
             'local' => 'id',
             'foreign' => 'story1_id'));

        $this->hasMany('Story', array(
             'refClass' => 'StoryRelation',
             'local' => 'related_story_id',
             'foreign' => 'story_id'));

        $this->hasMany('StoryRelation', array(
             'local' => 'id',
             'foreign' => 'story_id'));

        $searchable0 = new Doctrine_Template_Searchable(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'subtitle',
              2 => 'teaser',
              3 => 'description',
             ),
             'batchUpdates' => true,
             ));
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'unique' => true,
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             'uniqueIndex' => true,
             'indexName' => 'slug',
             'builder' => 
             array(
              0 => 'tuiWikiUrl',
              1 => 'urlize',
             ),
             ));
        $versionable0 = new Doctrine_Template_Versionable(array(
             'builderOptions' => 
             array(
              'baseClassName' => 'FoafRecord',
             ),
             ));
        $this->actAs($searchable0);
        $this->actAs($sluggable0);
        $this->actAs($versionable0);
    }
}